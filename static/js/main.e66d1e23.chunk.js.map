{"version":3,"sources":["index.js"],"names":["App","useState","tips","setTips","outerRadius","setOuterRadius","innerRadius","setInnerRadius","matchRadii","setMatchRadii","centerX","setCenterX","centerY","setCenterY","strokeWidth","setStrokeWidth","startAngle","setAngle","winding","setWinding","commandSeparator","setCommandSeparator","xySeparator","setXySeparator","pointSeparator","setPointSeparator","svgPath","setSvgPath","precision","setPrecision","viewBox","useMemo","bound","Math","max","radiiRatio","n","cos","points","increment","inner","point","abs","angle","r","x","y","sin","push","sideLength","dist","totalLength","tipToTip","troughToTrough","formatPoints","useCallback","string","Object","entries","index","toFixed","split","join","d","output","Control","text","Component","Float","min","value","set","Bool","Select","options","id","x1","x2","y1","y2","stroke","opacity","cx","cy","fill","strokeLinecap","strokeLinejoin","Text","readOnly","Readout","degrees","PI","a","b","sqrt","pow","props","className","name","htmlFor","type","step","onChange","event","Number","target","map","option","key","checked","render","document","getElementById"],"mappings":"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","file":"static/js/main.e66d1e23.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { useCallback } from 'react';\nimport { useMemo } from 'react';\nimport { render } from 'react-dom';\n\nimport './index.css';\n\n// main app component\nconst App = () => {\n  // app state\n  let [tips, setTips] = useState(5);\n  const [outerRadius, setOuterRadius] = useState(100);\n  const [innerRadius, setInnerRadius] = useState(50);\n  const [matchRadii, setMatchRadii] = useState(true);\n  const [centerX, setCenterX] = useState(0);\n  const [centerY, setCenterY] = useState(0);\n  const [strokeWidth, setStrokeWidth] = useState(1);\n  const [startAngle, setAngle] = useState(90);\n  const [winding, setWinding] = useState('clockwise');\n  const [commandSeparator, setCommandSeparator] = useState('\\\\t');\n  const [xySeparator, setXySeparator] = useState('\\\\t');\n  const [pointSeparator, setPointSeparator] = useState('\\\\n');\n  const [svgPath, setSvgPath] = useState(true);\n  const [precision, setPrecision] = useState(3);\n\n  // calculate svg view box (viewport) left/right/width/height\n  const viewBox = useMemo(() => {\n    const bound = Math.max(outerRadius, innerRadius) + strokeWidth / 2 + 10;\n    return [centerX - bound, centerY - bound, bound * 2, bound * 2];\n  }, [outerRadius, innerRadius, centerX, centerY, strokeWidth]);\n\n  // calculate \"perfect\" ratio of outer to inner radius based on # of tips\n  const radiiRatio = useMemo(() => {\n    const n = tips;\n    const m = 2;\n    if (n < 5) return 1 / 2;\n    else return cos((180 * m) / n) / cos((180 * (m - 1)) / n);\n  }, [tips]);\n\n  // calculate points of star\n  const points = useMemo(() => {\n    const increment = winding === 'clockwise' ? -1 : 1;\n    const points = [];\n    let inner = false;\n    for (let point = 0; Math.abs(point) < tips * 2; point += increment) {\n      const angle = startAngle + (point / 2 / tips) * 360;\n      const r = inner ? innerRadius : outerRadius;\n      const x = centerX + cos(angle) * r;\n      const y = centerY - sin(angle) * r;\n      points.push({ x, y });\n      inner = !inner;\n    }\n    return points;\n  }, [tips, outerRadius, innerRadius, centerX, centerY, startAngle, winding]);\n\n  // calculate other relevant length and distance info\n  const sideLength = useMemo(() => dist(points[0], points[1]), [points]);\n  const totalLength = useMemo(() => sideLength * tips * 2, [tips, sideLength]);\n  const tipToTip = useMemo(() => dist(points[0], points[2]), [points]);\n  const troughToTrough = useMemo(() => dist(points[1], points[3]), [points]);\n\n  // function to convert points to string list for output and svg path\n  const formatPoints = useCallback(\n    (commandSeparator, xySeparator, pointSeparator, svgPath) => {\n      let string = '';\n      for (const [index, point] of Object.entries(points)) {\n        if (svgPath) {\n          string += index === '0' ? 'M' : 'L';\n          string += commandSeparator;\n        }\n        string +=\n          point.x.toFixed(precision) +\n          xySeparator +\n          point.y.toFixed(precision) +\n          pointSeparator;\n      }\n      if (svgPath) string += 'z';\n\n      // replace user-entered escape characters with actual characters\n      string = string.split(/\\\\s/).join(' ');\n      string = string.split(/\\\\t/).join('\\t');\n      string = string.split(/\\\\n/).join('\\n');\n      return string;\n    },\n    [points, precision]\n  );\n\n  // make d string for svg path\n  const d = useMemo(() => formatPoints(' ', ' ', '\\n', true), [formatPoints]);\n\n  // make string output for user to copy\n  const output = useMemo(\n    () => formatPoints(commandSeparator, xySeparator, pointSeparator, svgPath),\n    [commandSeparator, xySeparator, pointSeparator, svgPath, formatPoints]\n  );\n\n  // render component\n  return (\n    <>\n      <section>\n        <h1>Star Generator</h1>\n      </section>\n      <section>\n        <Control\n          text='tips'\n          Component={Float}\n          min='2'\n          max='1000'\n          value={tips}\n          set={setTips}\n        />\n        <Control\n          text='outer radius'\n          Component={Float}\n          min='0'\n          max='10000'\n          value={outerRadius}\n          set={(value) => {\n            setOuterRadius(value);\n            if (matchRadii) setInnerRadius((value * radiiRatio).toFixed(5));\n          }}\n        />\n        <Control\n          text='inner radius'\n          Component={Float}\n          min='0'\n          max='10000'\n          value={innerRadius}\n          set={(value) => {\n            setInnerRadius(value);\n            if (matchRadii) setOuterRadius((value / radiiRatio).toFixed(5));\n          }}\n        />\n        <Control\n          text='match radii'\n          Component={Bool}\n          value={matchRadii}\n          set={setMatchRadii}\n        />\n        <Control\n          text='center X'\n          Component={Float}\n          min='-1000'\n          max='1000'\n          value={centerX}\n          set={setCenterX}\n        />\n        <Control\n          text='center Y'\n          Component={Float}\n          min='-1000'\n          max='1000'\n          value={centerY}\n          set={setCenterY}\n        />\n        <Control\n          text='stroke width'\n          Component={Float}\n          min='0'\n          max='1000'\n          value={strokeWidth}\n          set={setStrokeWidth}\n        />\n        <Control\n          text='start angle'\n          Component={Float}\n          min='-360'\n          max='360'\n          value={startAngle}\n          set={setAngle}\n        />\n        <Control\n          text='winding'\n          Component={Select}\n          options={['clockwise', 'counter-clockwise']}\n          value={winding}\n          set={setWinding}\n        />\n      </section>\n\n      <section>\n        <svg id='preview' viewBox={viewBox}>\n          <style>\n            {`\n              svg:hover #star {\n                animation: star 2s ease forwards infinite;\n                stroke-dasharray: ${totalLength};\n              }\n              @keyframes star {\n                from {\n                  stroke-dashoffset: ${totalLength};\n                }\n                to {\n                  stroke-dashoffset: 0;\n                }\n              }\n            `}\n          </style>\n          <line\n            id='x_axis'\n            x1='-999999'\n            x2='999999'\n            y1='0'\n            y2='0'\n            stroke='black'\n            strokeWidth='1'\n            opacity='0.1'\n          />\n          <line\n            id='y_axis'\n            x1='0'\n            x2='0'\n            y1='-999999'\n            y2='999999'\n            stroke='black'\n            strokeWidth='1'\n            opacity='0.1'\n          />\n          <circle\n            id='outer_radius'\n            cx={centerX}\n            cy={centerY}\n            r={outerRadius}\n            fill='none'\n            stroke='black'\n            strokeWidth='1'\n            opacity={0.1}\n          />\n          <line\n            id='angle_marker'\n            x1={centerX}\n            y1={centerY}\n            x2={centerX + cos(startAngle) * outerRadius}\n            y2={centerY - sin(startAngle) * outerRadius}\n            stroke='black'\n            strokeWidth='1'\n            opacity={0.1}\n          />\n          <circle\n            id='inner_radius'\n            cx={centerX}\n            cy={centerY}\n            r={innerRadius}\n            fill='none'\n            stroke='black'\n            strokeWidth='1'\n            opacity={0.1}\n          />\n          <path\n            id='star'\n            d={d}\n            fill='none'\n            stroke='currentColor'\n            strokeWidth={strokeWidth}\n            strokeLinecap='round'\n            strokeLinejoin='round'\n          />\n        </svg>\n      </section>\n\n      <section>\n        <Control\n          text='command separator'\n          Component={Text}\n          value={commandSeparator}\n          set={setCommandSeparator}\n        />\n        <Control\n          text='x-y separator'\n          Component={Text}\n          value={xySeparator}\n          set={setXySeparator}\n        />\n        <Control\n          text='point separator'\n          Component={Text}\n          value={pointSeparator}\n          set={setPointSeparator}\n        />\n        <Control\n          text='SVG path'\n          Component={Bool}\n          value={svgPath}\n          set={setSvgPath}\n        />\n        <Control\n          text='precision'\n          Component={Float}\n          min='1'\n          max='50'\n          value={precision}\n          set={setPrecision}\n        />\n      </section>\n\n      <section>\n        <textarea id='output' value={output} readOnly />\n      </section>\n\n      <section>\n        <Readout text='side length' value={sideLength} />\n        <Readout text='total length' value={totalLength} />\n        <Readout text='tip to tip' value={tipToTip} />\n        <Readout text='trough to trough' value={troughToTrough} />\n      </section>\n    </>\n  );\n};\n\n// math util functions\nconst sin = (degrees) => Math.sin((2 * Math.PI * degrees) / 360);\nconst cos = (degrees) => Math.cos((2 * Math.PI * degrees) / 360);\nconst dist = (a = { x: 0, y: 0 }, b = { x: 0, y: 0 }) =>\n  Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n\n// generic control component with label\nconst Control = ({ text, Component, ...props }) => (\n  <div className='control'>\n    <Component className='control_input' name={text} {...props} />\n    <label className='control_label' htmlFor={text}>\n      {text}\n    </label>\n  </div>\n);\n\n// number input box component\nconst Float = ({ set, ...props }) => (\n  <input\n    type='number'\n    step={1}\n    onChange={(event) => set(Number(event.target.value))}\n    {...props}\n  />\n);\n\n// dropdown select component\nconst Select = ({ options, value, set, ...props }) => (\n  <select onChange={(event) => set(event.target.value)} {...props}>\n    {options.map((option, index) => (\n      <option key={index} value={option}>\n        {option}\n      </option>\n    ))}\n  </select>\n);\n\n// text input component\nconst Text = ({ set, ...props }) => (\n  <input type='text' onChange={(event) => set(event.target.value)} {...props} />\n);\n\n// checkbox component\nconst Bool = ({ value, set, ...props }) => (\n  <input\n    type='checkbox'\n    checked={value ? 'checked' : ''}\n    onChange={(event) => set(event.target.checked ? true : false)}\n    {...props}\n  />\n);\n\n// value readout component\nconst Readout = ({ text, value }) => (\n  <div className='control'>\n    <span className='control_input' name={text}>\n      {value.toFixed(2)}\n    </span>\n    <label className='control_label' htmlFor={text}>\n      {text}\n    </label>\n  </div>\n);\n\n// run app component\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}